package stepDefinitions;

import static io.restassured.RestAssured.given;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.http.ContentType;
import io.restassured.path.json.JsonPath;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;
import io.restassured.specification.ResponseSpecification;
import static org.junit.Assert.*;
import pojo.AddPlace;
import pojo.locationdata;
import resources.APIResources;
import resources.TestDataBuild;
import resources.Utils;

public class placeValidation extends Utils {
	//since we are using few var in most of the methods, sp defining them globally here, latre may be we will remove them
	RequestSpecification req;
	ResponseSpecification resspec;
	Response response;
	static String place_id;
	
	
	TestDataBuild data = new TestDataBuild();
	
	@Given("Add Place Payload with {string} {string} {string}")
	public void add_place_payload_with(String name, String language, String address) throws IOException {
		
	
		req = given().spec(requsetSpecification()).body(data.addPlacePayload(name, language, address));
	}
	
	
	@When("user calls {string} with {string} http request")
	public void user_calls_with_http_request(String resources, String httpmethod) {
		
		APIResources resourseAPI = APIResources.valueOf(resources);	//Kind of creating object of ENUM class
		System.out.println(resourseAPI.getResources());
		resspec = new ResponseSpecBuilder().expectStatusCode(200).expectContentType(ContentType.JSON).build();
		
		if(httpmethod.equalsIgnoreCase("POST")) {
			response = req.when().post(resourseAPI.getResources());
		}else if(httpmethod.equalsIgnoreCase("GET")) {
			response = req.when().get(resourseAPI.getResources());
		}
	}
	
	
	
	@Then("the API call got success with status code {int}")
	public void the_api_call_got_success_with_status_code(Integer int1) {
	    // Write code here that turns the phrase above into concrete actions
		assertEquals(response.getStatusCode(),200);
	}
	
	
	@Then("{string} in response body is {string}")
	public void in_response_body_is(String KeyValue, String ExpectedValue) {
	    // Write code here that turns the phrase above into concrete actions
		
		assertEquals(getJsonPath(response,KeyValue), ExpectedValue);
	}
	
	
	
	@Then("verify place_id created maps to {string} using {string}")
	public void verify_place_id_created_maps_to_using(String expectedname, String resources) throws IOException {
	     place_id = getJsonPath(response, "place_id");
		req = given().spec(requsetSpecification()).queryParam("place_id", place_id);
		user_calls_with_http_request(resources, "GET");//after passing GET., above we have if condition that will look got passed http method
		//to retrieve the name value from get method response, using JSONPATH class to fetch the value and compare
		String actualname = getJsonPath(response, "name");
		assertEquals(actualname,expectedname);
	    
	}
	
	@Given("DeletePlace Payload")
	public void delete_place_payload() {
		given().spec(requsetSpecification()).body(data.deletepayload(null))
		
		
	    
	}
	
	

}
